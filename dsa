# 1.Find the Duplicate Number
Linked List cycle method
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0];
        int fast = nums[0];
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while( slow != fast);
        fast = nums[0];
        while(slow != fast){
            slow= nums[slow];
            fast = nums[fast];
        }
    
    return slow;
    }
};

#2.Sort Colors
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low = 0;
        int high = nums.size()-1;
        int mid =0;
        while( mid <= high){
            if(nums[mid]  == 0){
                swap(nums[mid], nums[low]);
                low++;
                mid++;
            }
            else if(nums[mid] == 2){
                swap(nums[mid], nums[high]);
                high--;
            }
            else{
                mid++;
            }
        }
    }
};
#3. Chocolate distribution problem
#include <bits/stdc++.h> 
int findMinDiff(int n, int m, vector<int> chocolates) {
    if(m==0 || n==0){
        return 0;
    }
    sort(chocolates.begin(),chocolates.end());
    if(n<m){
        return -1;
    }
    int min_diff = INT_MAX;
    for(int i =0;i+m-1<n;i++){
        int diff = chocolates[i+m-1] - chocolates[i];
        if(diff < min_diff){
            min_diff = diff;
        }
    }
    return min_diff;
}
